{"version":3,"sources":["RichEditor/Toolbar/Toolbar.js","RichEditor/Button/Button.js","RichEditor/Icon/Icon.js","RichEditor/RichEditor.js","App.js","index.js"],"names":["Menu","React","forwardRef","ref","className","props","cx","css","Toolbar","Button","active","reversed","Icon","keyBindingFunction","event","KeyBindingUtil","hasCommandModifier","shiftKey","key","getDefaultKeyBinding","RichEditor","state","initialValue","blocksFromHTML","convertFromHTML","ContentState","createFromBlockArray","contentBlocks","entityMap","useState","EditorState","createWithContent","createEmpty","editorState","setEditorState","ToolButton","isActive","format","icon","type","getCurrentInlineStyle","has","RichUtils","getCurrentBlockType","data-format","onMouseDown","preventDefault","currentTarget","getAttribute","toggleInlineStyle","toggleBlockType","toggleFormat","contentState","getCurrentContent","showPlaceholder","hasText","getBlockMap","first","getType","console","log","stateToHTML","placeholder","onChange","handleKeyCommand","command","newEditorState","keyBindingFn","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.913aeace.chunk.js","sourcesContent":["import React from 'react';\nimport { cx, css } from 'emotion'\n\nconst Menu = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    {...props}\n    ref={ref}\n    className={cx(\n      className,\n      css`\n        & > * {\n          display: inline-block;\n        }\n        & > * + * {\n          margin-left: 15px;\n        }\n      `\n    )}\n  />\n))\n\nconst Toolbar = React.forwardRef(({ className, ...props }, ref) => (\n  <Menu\n    {...props}\n    ref={ref}\n    className={cx(\n      className,\n      css`\n        position: relative;\n        padding: 1px 18px 17px;\n        margin: 0 -20px;\n        border-bottom: 2px solid #eee;\n        margin-bottom: 20px;\n      `\n    )}\n  />\n))\n\nexport default Toolbar;","import React from 'react';\nimport { cx, css } from 'emotion'\n\nconst Button = React.forwardRef(\n  ({ className, active, reversed, ...props }, ref) => (\n    <span\n      {...props}\n      ref={ref}\n      className={cx(\n        className,\n        css`\n          cursor: pointer;\n          color: ${reversed\n            ? active\n              ? 'white'\n              : '#aaa'\n            : active\n            ? 'black'\n            : '#ccc'};\n        `\n      )}\n    />\n  )\n)\n\nexport default Button","import React from 'react'\nimport { cx, css } from 'emotion'\n\nconst Icon = React.forwardRef(({ className, ...props }, ref) => (\n  <span\n    {...props}\n    ref={ref}\n    className={cx(\n      'material-icons',\n      className,\n      css`\n        font-size: 18px;\n        vertical-align: text-bottom;\n      `\n    )}\n  />\n))\n\nexport default Icon","import React, { useState } from 'react';\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  getDefaultKeyBinding,\n  KeyBindingUtil,\n  ContentState,\n  convertFromHTML\n} from 'draft-js'\nimport { stateToHTML } from 'draft-js-export-html'\nimport Toolbar from './Toolbar'\nimport Button from './Button'\nimport Icon from './Icon'\nimport './styles.css'\n\nconst keyBindingFunction = event => {\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === 'x') {\n    return 'strikethrough';\n  }\n  return getDefaultKeyBinding(event);\n}\n\nconst RichEditor = ({ initialValue }) => {\n  let state;\n  if (initialValue) {\n    const blocksFromHTML = convertFromHTML(initialValue);\n    state = ContentState.createFromBlockArray(\n      blocksFromHTML.contentBlocks,\n      blocksFromHTML.entityMap,\n    );\n  }\n  const [editorState, setEditorState] = useState(\n    state ? EditorState.createWithContent(state) : EditorState.createEmpty()\n  );\n\n  const toggleFormat = (event, type) => {\n    event.preventDefault();\n    const format = event.currentTarget.getAttribute('data-format');\n\n    if (type === 'inline') setEditorState(RichUtils.toggleInlineStyle(editorState, format));\n    else setEditorState(RichUtils.toggleBlockType(editorState, format));\n  }\n\n  const handleKeyCommand = command => {\n    // inline formatting key commands handles bold, italic, code, underline\n    let newEditorState = RichUtils.handleKeyCommand(editorState, command);\n\n    // If RichUtils.handleKeyCommand didn't find anything, check for our custom\n    // strikethrough command and call `RichUtils.toggleInlineStyle` if we find it\n    if (!newEditorState && command === 'strikethrough') {\n      newEditorState = RichUtils.toggleInlineStyle(editorState, 'STRIKETHROUGH');\n    }\n\n    if (newEditorState) {\n      setEditorState(newEditorState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  const ToolButton = ({ format, icon, type }) => {\n    let isActive;\n\n    if (type === 'inline') {\n      const currentInlineStyle = editorState.getCurrentInlineStyle();\n      isActive = currentInlineStyle.has(format);\n    } else {\n      const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n      isActive = currentBlockType === format\n    }\n\n    return (\n      <Button active={isActive} data-format={format} onMouseDown={event => toggleFormat(event, type)}>\n        <Icon>{icon}</Icon>\n      </Button>\n    );\n  }\n\n  // to patch placeholder issue\n  const contentState = editorState.getCurrentContent();\n  let showPlaceholder = false;\n  if (!contentState.hasText()) {\n    if (contentState.getBlockMap().first().getType() === 'unstyled') {\n      showPlaceholder = true;\n    }\n  }\n\n  // export HTML\n  console.log(stateToHTML(contentState));\n\n  return (\n    <div className={!showPlaceholder ? 'hide-placeholder' : ''}>\n      <Toolbar>\n        <ToolButton format=\"BOLD\" icon=\"format_bold\" type=\"inline\" />\n        <ToolButton format=\"ITALIC\" icon=\"format_italic\" type=\"inline\" />\n        <ToolButton format=\"UNDERLINE\" icon=\"format_underlined\" type=\"inline\" />\n        <ToolButton format=\"STRIKETHROUGH\" icon=\"strikethrough_s\" type=\"inline\" />\n        <ToolButton format=\"CODE\" icon=\"code\" type=\"inline\" />\n        <ToolButton format=\"unordered-list-item\" icon=\"format_list_bulleted\" type=\"block\" />\n      </Toolbar>\n      <Editor\n        placeholder=\"Enter some rich textâ€¦\"\n        editorState={editorState}\n        onChange={setEditorState}\n        handleKeyCommand={handleKeyCommand}\n        keyBindingFn={keyBindingFunction}\n      />\n    </div>\n)\n};\n\nexport default RichEditor;","import React from 'react';\nimport RichEditor from \"./RichEditor\";\nimport './styles.css';\n\nconst initialValue = '<ul class=\"md-block-unordered-list-item\"><li>It\\'s rare <strong>that</strong> <del>TLs</del> are <em>invited</em> to <u>participate</u> in the <code>pitch</code> review process.</li></ul>'\n\n// const initialValue = '<ul><li>It\\'s rare that TLs are <strong>invited</strong> to participate in the pitch <strong>review</strong> process.</li><img alt=\"\" src=\"https://p-VVF5MJM.t2.n0.cdn.getcloudapp.com/items/2NuXk4j8/Image%202020-04-14%20at%202.39.07%20PM.png?v=1f4b0ec164546d136b3f61a1f38c9aef\" /><p></p></ul>'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <RichEditor initialValue={initialValue} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}